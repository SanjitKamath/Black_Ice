import numpy as np
import tensorflow as tf
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Load malware dataset
data = pd.read_csv("malware_dataset.csv")

# Preprocessing: Remove non-numeric columns
non_numeric_cols = [col for col in data.columns if data[col].dtype == 'object']
if non_numeric_cols:
    data = data.drop(columns=non_numeric_cols)

# Assume last column is the label (0 = benign, 1 = malware)
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

# Normalize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a simple, less robust model
model = Sequential([
    Dense(8, activation='relu', input_shape=(X_train.shape[1],)),  # Reduced neurons
    Dense(4, activation='relu'),  # Further reduced neurons
    Dense(1, activation='sigmoid')
])

# Compile with a higher learning rate to make the model more sensitive
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.05),  # Increased learning rate
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train for fewer epochs to limit robustness
history = model.fit(X_train, y_train, epochs=3, batch_size=64, validation_data=(X_test, y_test))

# Save the modified, less robust model
model.save("malware_classifier.h5")

# Evaluate the model's accuracy and print it
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Final Test Accuracy: {accuracy:.4f}")

# Plotting accuracy over epochs
plt.figure(figsize=(10, 5))
plt.plot(history.history['accuracy'], label='Training Accuracy', marker='o')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy', marker='s')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Model Accuracy Over Epochs')
plt.legend()
plt.grid(True)
plt.show()

# Plotting loss over epochs
plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'], label='Training Loss', marker='o', color='red')
plt.plot(history.history['val_loss'], label='Validation Loss', marker='s', color='green')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Model Loss Over Epochs')
plt.legend()
plt.grid(True)
plt.show()
